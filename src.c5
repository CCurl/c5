: here  (ha) @ ;
: vhere (vha) @ ;
: last  (la) @ ;
: immediate 1 last cell + c! ;
: inline    2 last cell + c! ;

: begin here ; immediate
: while  (jmpnz)  c, , ; immediate
: -while (njmpnz) c, , ; immediate
: until  (jmpz)   c, , ; immediate
: -until (njmpz)  c, , ; immediate
: again  (jmp)    c, , ; immediate

: if (jmpz)   c, here 0 , ; immediate
: -if (njmpz) c, here 0 , ; immediate
: if0 (jmpnz) c, here 0 , ; immediate
: then here swap ! ; immediate

: a+  a@ 1+ a! ; inline
: @a  a@  c@ ; inline
: @a+ a@+ c@ ; inline
: !a+ a@+ c! ; inline
: !t+ t@+ c! ; inline
: adrop  a> drop ; inline
: tdrop t> drop ; inline

: ( >in @ >a 
   begin
      @a+ ')' = if  a@ >in !  adrop  exit  then 
   again ; immediate

: interp?  state @ 0= ;
: comp?  interp? 0= ;

: (quote) ( -- )  vhere dup >t  >in @ 1+ >a
   begin
      @a '"' = if
         0 !t+  a> 1+ >in !
         interp? if tdrop exit then
         t> (vha) ! (lit4) c, , exit
      then @a+ !t+
   again ;

: "  (quote) ; immediate
: ." (quote) interp? if ztype exit then
  (ztype) c, ; immediate

: bl 32 ; inline
: tab 9 emit ; inline
: cr 13 emit 10 emit ; inline
: space bl emit ; inline
: negate com 1+ ; inline

: #neg 0 >a dup 0 < if negate a+ then ;
: #c t@ 1- dup t! c! ;
: #n '0' + dup '9' > if 7 + then #c ;
: <# #neg last 32 - >t 0 t@ c! ;
: #. '.' #c ;
: # base @ /mod swap #n ;
: #s begin # -while drop ;
: #> a@ if '-' #c then t> adrop ;
: .  ( n-- ) <# #s #> ztype space ;
: .2 ( n-- ) <# # #s #> ztype space ;
: .3 ( n-- ) <# # # #s #> ztype space ;

: 2+ 1+ 1+ ; inline
: mod /mod drop ; inline
: ?dup -if dup then ;

: depth (dsp) @ 1- ;
: .s '(' emit space depth ?dup if
      for i 1+ cell * dstk + @ . next
   then ')' emit ;

: dict-end dict dict-sz + 1- ;
: de>xt    @ ;
: de>flags cell + c@ ;
: de>len   cell + 1+ c@ ;
: de>name  cell + 2+ ;
: .de-word de>name ztype t@+ 10 mod if0 cr exit then tab ;
: words last >a 1 >t begin
    a@ .de-word a@ de-sz + a!
    a@ dict-end < while '(' emit t> 1- . ." words)" adrop ;


( editor )
: .edch ( TODO! ) 32 emit ;
: .b1  66 for '-' emit next cr ; : .b2 '|' emit ;
: .scr .b1 32 for .b2 64 for .edch next .b2 cr next .b1 ;
: ed .scr ;

( temp words )
: .ver  ." c5 v" version <# # # #. # # #. #s #> ztype cr ;
.ver

( temp for testing )
: .h ( n-- ) base @ >t 16 base ! .2 t> base ! ;
: .d ( n-- ) base @ >t 10 base ! .3 t> base ! ;
: .b ( n-- ) base @ >t  2 base ! .  t> base ! ;

: dump    ( f t-- ) >t >a begin @a+ .  a@ t@ > until tdrop adrop ;
: hexdump ( f t-- ) >t >a begin @a+ .h a@ t@ > until tdrop adrop ;

: mil 1000 dup * * ;
: elapsed timer swap - . ." usec" ;
: bm timer swap for next elapsed ;
